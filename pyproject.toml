[build-system]
requires = ["setuptools>=65", "setuptools_scm[toml]>=7", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "whispercpp"
description = "whispercpp: Pybind11 bindings for whisper.cpp"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.8"
version = "0.0.2.dev0"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.setuptools.exclude-package-data]
whispercpp = ["*.cc", "*.h", "BUILD", "*.o"]

[tool.setuptools.packages.find]
where = ["src"]
include = ["whispercpp*"]

[tool.setuptools.package-data]
whispercpp = ["py.typed", "*.so", "*.pyi"]

[tool.pytest.ini_options]
addopts = ["-rfEX", "-vvv", "--cov=src/whispercpp", "--cov-report=term-missing"]
python_files = ["test_*.py", "*_test.py"]
testpaths = ["tests"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
parallel = true
source = ["src/whispercpp/"]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "\\#\\s*pragma: no cover",
    "^\\s*def __repr__",
    "^\\s*raise AssertionError",
    "^\\s*raise NotImplementedError",
    "^\\s*except ImportError",
    "if __name__ == .__main__.:",
    "^\\s*if ((_)?t\\.)?TYPE_CHECKING:",
    "^\\s*@(t\\.)?overload( |$)",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
# similar to black's
line-length = 88
# We ignore E501 (line too long) here because we keep user-visible strings on one line.
ignore = ["E501"]
exclude = [ "bazel-*/", "venv", "typings" ]
target-version = "py310"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
lines-after-imports = 2

[tool.black]
line-length = 88
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.tox
    | \.venv
    | \.build
    | venv
    | _build
    | build
    | bazel-*
    | lib
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
length_sort = true
force_single_line = true
order_by_type = true
known_first_party = "bentoml"
force_alphabetical_sort_within_sections = true
skip_glob = ["test/*", "venv/*", "lib/*", "bazel-*"]

[tool.pyright]
pythonVersion = "3.11"
exclude = ["bazel-*", "extern"]
typeCheckingMode = "strict"
analysis.useLibraryCodeForTypes = true
enableTypeIgnoreComments = true

[tool.cibuildwheel]
test-requires = "pytest"
test-command = "pytest {project}/tests"
build-frontend = "build"
build-verbosity = "3"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
environment = { RUNNER_OS="MacOS" }

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
environment = { RUNNER_OS="Linux" }
