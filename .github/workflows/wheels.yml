name: wheels
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main
concurrency:
  group: wheels-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
env:
  LINES: 200
  COLUMNS: 200
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaultsrun
defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}
jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: github.repository_owner == 'aarnphm' # Don't run on fork repository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: "3.8"
      - name: Build sdist
        run: |
          # TODO: when bazel support releasing sdist, we can remove this.
          pip install build

          python -m build --sdist
      - name: Test built sdist
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install dist/*.tar.gz && python -c "import whispercpp as w;print(dir(w.api)); print(dir(w.audio));"
      - name: Upload to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/* --repository pypi --verbose
  build-arm-wheels:
    name: Build ARM wheels for ${{ matrix.python[1] }}-${{ matrix.platform[0] }}
    runs-on: ${{ matrix.platform[1] }}
    if: ${{ failure() }} # Disable this for now. We will tackle this later.
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        python:
          - ["cp38", "3.8"]
          - ["cp39", "3.9"]
          - ["cp310", "3.10"]
          - ["cp311", "3.11"]
        platform:
          - [manylinux_aarch64, ubuntu-latest]
          - [macosx_arm64, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: ${{ matrix.python[1] }}
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.platform[0] }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python[0] }}-${{ startsWith(matrix.platform[0], 'macosx')
            && 'macosx' || matrix.platform[0] }}
          path: ./wheelhouse/*.whl
  build-wheel:
    name: Build wheels for python${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    if: github.repository_owner == 'aarnphm' # Don't run on fork repository
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11.2"]
        exclude:
          - os: "windows-latest"
          - python-version: "3.11.2"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Running update requirements
        run: bazel run pypi_update
      - name: Building wheels
        if: github.event_name == 'pull_request'
        run: bazel build whispercpp_wheel
      - name: Test built wheel
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install $(bazel info bazel-bin)/*.whl && python -c "import whispercpp as w;print(dir(w.api)); print(dir(w.audio));"
      - name: Retrieving versions
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: get-info
        run: |
          VERSION=${{ github.ref_name }}
          echo "version=${VERSION:1}" >>$GITHUB_OUTPUT
      - name: Publish built wheels
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          ./tools/bazel run -c dbg --define=ci=true --stamp --embed_label=${{ steps.get-info.outputs.version }} -- //:whispercpp_wheel.publish --repository pypi --verbose
